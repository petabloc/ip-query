name: Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Check code formatting
      run: npm run format:check
      
    - name: Build project
      run: npm run build
      
    - name: Run tests
      run: npm test

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Determine version bump
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "bump=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          # Auto-determine version bump from commit messages
          if git log --oneline -1 | grep -E "(BREAKING CHANGE|major)"; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif git log --oneline -1 | grep -E "(feat|feature|minor)"; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi
        fi
        
    - name: Bump version
      id: bump
      run: |
        OLD_VERSION=$(node -p "require('./package.json').version")
        npm version ${{ steps.version.outputs.bump }} --no-git-tag-version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
    - name: Update CHANGELOG
      run: |
        if [ ! -f CHANGELOG.md ]; then
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi
        
        # Create temporary file for new changelog entry
        cat > temp_changelog.md << EOF
        # Changelog
        
        ## [v${{ steps.bump.outputs.new_version }}] - $(date +%Y-%m-%d)
        
        ### Changes
        - Release v${{ steps.bump.outputs.new_version }}
        - Automated release from main branch
        
        EOF
        
        # Append existing changelog (skip first line "# Changelog")
        tail -n +2 CHANGELOG.md >> temp_changelog.md
        mv temp_changelog.md CHANGELOG.md
        
    - name: Commit version bump
      run: |
        git add package.json package-lock.json CHANGELOG.md
        git commit -m "chore: bump version to v${{ steps.bump.outputs.new_version }}"
        git push origin ${{ github.ref_name }}
        
    - name: Create Git tag
      run: |
        git tag -a "v${{ steps.bump.outputs.new_version }}" -m "Release v${{ steps.bump.outputs.new_version }}"
        git push origin "v${{ steps.bump.outputs.new_version }}"
        
    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << EOF
        ## IP Query Tool v${{ steps.bump.outputs.new_version }}
        
        ### What's Changed
        
        This release includes the latest updates and improvements to the IP Query Tool for VPC Flow Log analysis.
        
        ### Features
        - VPC Flow Log analysis with threat intelligence integration
        - Support for both AWS Commercial and GovCloud environments
        - Multiple timestamp format support (ISO 8601, Unix timestamps, simple date-time)
        - CSV and plain text file input support
        - Interactive configuration setup
        - AWS WAF blocklist generation
        
        ### Installation
        
        \`\`\`bash
        npm install -g ip-query
        \`\`\`
        
        ### Quick Start
        
        \`\`\`bash
        # Setup configuration
        ip-query --configure
        
        # Analyze time range
        ip-query --time-from "2025-01-01 12:00:00" --time-to "2025-01-01 12:00:10"
        
        # Analyze from file
        ip-query --file-in timestamps.txt --time-in-seconds 5
        \`\`\`
        
        ### Documentation
        
        See the [README](https://github.com/petabloc/ip-query#readme) for complete usage instructions.
        
        ---
        **Full Changelog**: https://github.com/petabloc/ip-query/compare/v${{ steps.bump.outputs.old_version }}...v${{ steps.bump.outputs.new_version }}
        EOF
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.bump.outputs.new_version }}
        name: IP Query Tool v${{ steps.bump.outputs.new_version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        generate_release_notes: false